// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;



contract Arbitrageur is
FlashLoanReceiverBase(address(0xd05e3E715d945B59290df0ae8eF85c1BdB684744))
{
    address public constant DAI_ADDRESS =0x27F8D03b3a2196956ED754baDc28D73be8830A6e;
    address public constant USDT_ADDRESS = 0x60D55F02A771d515e077c9C2403a1ef324885CeC;
    //Polygon Factory Address
    address public constant uniswapV2FactoryAddress = 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32; 
    // sushiswap factory address 
    address public constant ISwapFactory=(0xc35DADB65012eC5796536bD9864eD8773aBc74C4);
     
     ILendingPool public lendingPool;
     IUniswapV2Exchange public exchangeA;
     ISwapFactoryExchange public exchangeB;
     IUniswapV2Factory public  UniswapV2FactoryA;
     ISwapFactory public ISwapFactoryB;

     constructor() public { uniswapV2FactoryA = IUniswapV2Factory(UNISWAPV2_FACTORY_A);
      address exchangeA_address = uniswapFactoryV2A.getExchange(DAI_ADDRESS);
       exchangeA = IUniswapV2Exchange(exchangeA_address);

        IswapFactoryB = IswapFactory(ISWAP_FACTORY_B);
         address exchangeB_address = iswapFactoryB.getExchange(USDT_ADDRESS);
         exchangeB = iswapExchange(exchangeB_address);
          address lendingPoolAddress = addressesProvider.getLendingPool();
           lendingPool = ILendingPool(lendingPoolAddress);
    }


 /*
     * Start the arbitrage
     */
    function makeArbitrage(uint256 amount) public onlyOwner {
        bytes memory data = "";

         Polygon dai = Polygon(DAI_ADDRESS);
         lendingPool.flashLoan(address(this), DAI_ADDRESS, amount, data);


          uint256 profit = dai.balanceOf(address(this));

          require(
            dai.transfer(msg.sender, profit),
            "Could not transfer back the profit"
        );
    }


    function executeOperation(
        address _reserve,
        uint256 _amount,
        uint256 _fee,
        bytes calldata _params
    ) external {
        // If transactions are not mined until deadline the transaction is reverted
        uint256 deadline = getDeadline();


        Polygon dai = Polygon(DAI_ADDRESS);
        Polygon usdt_ADDRESS = Polygon(USDT_ADDRESS);


 require(
            dai.approve(address(exchangeA), _amount),
            "Could not approve DAI sell"
        );

 uint256 tokenBought = exchangeA.tokenToTokenSwapInput(
            _amount,
            1,
            1,
            deadline,
            USDT_ADDRESS
        );

 require(
            usdt_ADDRESS.approve(address(exchangeB), tokenBought),
            "Could not approve DAI sell"
        );

        // Selling ETH at Exchange B
        uint256 daiBought = exchangeB.tokenToTokenSwapInput(
            tokenBought,
            1,
            1,
            deadline,
            DAI_ADDRESS
        );

        // Repay loan
        uint256 totalDebt = _amount.add(_fee);

        require(daiBought > totalDebt, "Did not profit");

        transferFundsBackToPoolInternal(_reserve, totalDebt);
    }

    function getDeadline() internal view returns (uint256) {
        return now + 3000;
    }
}
